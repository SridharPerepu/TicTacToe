{"ast":null,"code":"var _jsxFileName = \"/Users/sridharperepu/Documents/Projects/TicTacToeAI/aiplayer/src/Components/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Board from './Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WIN_CONDITIONS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\nconst PLAYERS = {\n  X: 'X',\n  O: 'O'\n};\nconst Game = () => {\n  _s();\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYERS.X);\n  const [winner, setWinner] = useState(null);\n  const handleSquareClick = index => {\n    if (squares[index] || winner) return;\n    const updatedSquares = [...squares];\n    updatedSquares[index] = currentPlayer;\n    setSquares(updatedSquares);\n    const isWinner = checkWinner(updatedSquares);\n    if (isWinner) {\n      setWinner(isWinner);\n      return;\n    }\n    let updateCurrPlayer = currentPlayer === PLAYERS.X ? PLAYERS.O : PLAYERS.X;\n    setCurrentPlayer(updateCurrPlayer);\n    if (updateCurrPlayer === PLAYERS.O) {\n      const bestMove = bestMoveAlgo(updatedSquares, PLAYERS.O);\n      updatedSquares[bestMove] = PLAYERS.O;\n      setSquares(updatedSquares);\n      const isWinner = checkWinner(updatedSquares);\n      if (isWinner) {\n        setWinner(isWinner);\n        return;\n      }\n    }\n    setCurrentPlayer(PLAYERS.X);\n  };\n  const checkWinner = squares => {\n    for (const condition of WIN_CONDITIONS) {\n      const [a, b, c] = condition;\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n  const bestMoveAlgo = (squares, player) => {\n    let bestScore = -Infinity;\n    let bestMove = 0;\n    for (let i = 0; i < 9; i++) {\n      if (!squares[i]) {\n        squares[i] = player;\n        let updatePlayer = player === PLAYERS.X ? PLAYERS.O : PLAYERS.X;\n        const score = minimax(squares, updatePlayer);\n        squares[i] = null;\n        if (score > bestScore) {\n          bestScore = score;\n          bestMove = i;\n        }\n      }\n    }\n    return bestMove;\n  };\n  const minimax = (squares, player) => {\n    if (checkWinner(squares) === PLAYERS.O) {\n      return 1;\n    } else if (checkWinner(squares) === PLAYERS.X) {\n      return -1;\n    } else {\n      let openSpots = 0;\n      for (let i = 0; i < 9; i++) {\n        if (!squares[i]) {\n          openSpots = openSpots + 1;\n        }\n      }\n      if (openSpots === 0) {\n        return 0;\n      }\n    }\n    let bestScore;\n    if (player === PLAYERS.X) {\n      bestScore = -Infinity;\n    } else {\n      bestScore = Infinity;\n    }\n    for (let i = 0; i < 9; i++) {\n      if (!squares[i]) {\n        squares[i] = player;\n        let updatePlayer = player === PLAYERS.X ? PLAYERS.O : PLAYERS.X;\n        const score = minimax(squares, updatePlayer);\n        squares[i] = null;\n        if (player === PLAYERS.X) {\n          bestScore = Math.max(bestScore, score);\n        } else {\n          bestScore = Math.min(bestScore, score);\n        }\n      }\n    }\n    return bestScore;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: `${currentPlayer}'s Turn`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squares: squares,\n        onClick: handleSquareClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"LG/ZKWTxBInHCwmqM/OFDUGpDA4=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Board","jsxDEV","_jsxDEV","WIN_CONDITIONS","PLAYERS","X","O","Game","_s","squares","setSquares","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","handleSquareClick","index","updatedSquares","isWinner","checkWinner","updateCurrPlayer","bestMove","bestMoveAlgo","condition","a","b","c","player","bestScore","Infinity","i","updatePlayer","score","minimax","openSpots","Math","max","min","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/sridharperepu/Documents/Projects/TicTacToeAI/aiplayer/src/Components/Game.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Board from './Board';\n\nconst WIN_CONDITIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst PLAYERS = {\n  X: 'X',\n  O: 'O',\n};\n\nconst Game = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYERS.X);\n  const [winner, setWinner] = useState(null);\n\n  const handleSquareClick = (index) => {\n\n    if (squares[index] || winner) return;\n\n    const updatedSquares = [...squares];\n    updatedSquares[index] = currentPlayer;\n    setSquares(updatedSquares);\n\n    const isWinner = checkWinner(updatedSquares);\n    if (isWinner) {\n      setWinner(isWinner);\n      return;\n    }\n    \n    let updateCurrPlayer = currentPlayer === PLAYERS.X ? PLAYERS.O : PLAYERS.X\n    setCurrentPlayer(updateCurrPlayer)\n\n    if (updateCurrPlayer === PLAYERS.O) {\n      const bestMove = bestMoveAlgo(updatedSquares, PLAYERS.O);\n      updatedSquares[bestMove] = PLAYERS.O;\n      setSquares(updatedSquares);\n\n      const isWinner = checkWinner(updatedSquares);\n      if (isWinner) {\n        setWinner(isWinner);\n        return;\n      }\n    }\n\n    setCurrentPlayer(PLAYERS.X);\n  };\n\n  const checkWinner = (squares) => {\n    for (const condition of WIN_CONDITIONS) {\n      const [a, b, c] = condition;\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n\n    return null;\n  }\n\n  const bestMoveAlgo = (squares, player) => {\n    let bestScore = -Infinity;\n    let bestMove = 0;\n\n    for (let i = 0; i < 9; i++) {\n        if (!squares[i]) {\n            squares[i] = player\n            let updatePlayer = player === PLAYERS.X ? PLAYERS.O : PLAYERS.X\n            const score = minimax(squares, updatePlayer);\n            squares[i] = null\n\n            if (score > bestScore) {\n                bestScore = score;\n                bestMove = i\n            }\n        }\n    }\n\n    return bestMove\n  }\n\n  const minimax = (squares, player) => {\n  \n    if (checkWinner(squares) === PLAYERS.O) {\n      return 1;\n    } else if (checkWinner(squares) === PLAYERS.X) {\n      return -1;\n    } else {\n        let openSpots = 0;\n        for (let i = 0; i < 9; i++) {\n            if (!squares[i]) {\n                openSpots = openSpots+1;\n            }\n        }\n        if (openSpots === 0) {\n            return 0\n        }\n    }\n\n    let bestScore;\n    if (player === PLAYERS.X) {\n        bestScore = -Infinity\n    }else {\n        bestScore = Infinity\n    }\n\n    for (let i = 0; i < 9; i++) {\n        if (!squares[i]) {\n            squares[i] = player;\n            let updatePlayer = player === PLAYERS.X ? PLAYERS.O : PLAYERS.X\n            const score = minimax(squares, updatePlayer);\n            squares[i] = null;\n\n            if (player === PLAYERS.X) {\n                bestScore = Math.max(bestScore, score);\n            } else {\n                bestScore = Math.min(bestScore, score);\n            }\n        }\n    }\n\n    return bestScore;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <h2>{`${currentPlayer}'s Turn`}</h2>\n        <Board squares={squares} onClick={handleSquareClick} />\n      </div>\n    </div>\n  )\n}\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}