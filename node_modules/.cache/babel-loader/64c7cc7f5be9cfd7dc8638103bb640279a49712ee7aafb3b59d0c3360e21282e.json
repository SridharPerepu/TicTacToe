{"ast":null,"code":"var _jsxFileName = \"/Users/sridharperepu/Documents/Projects/TicTacToeAI/aiplayer/src/Components/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Board from './Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WIN_CONDITIONS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\nconst PLAYERS = {\n  X: 'X',\n  O: 'O'\n};\nconst Game = () => {\n  _s();\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYERS.X);\n  const [winner, setWinner] = useState(null);\n  const handleSquareClick = index => {\n    console.log(index);\n    if (squares[index] || winner) return;\n    const updatedSquares = [...squares];\n    updatedSquares[index] = currentPlayer;\n    setSquares(updatedSquares);\n    console.log(\"squares\", squares);\n    const isWinner = checkWinner(updatedSquares);\n    if (isWinner) {\n      setWinner(isWinner);\n      return;\n    }\n\n    //setCurrentPlayer(currentPlayer === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n    console.log(\"curr\", currentPlayer === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n    if (currentPlayer === PLAYERS.X) {\n      const bestMove = bestMoveAlgo(updatedSquares, PLAYERS.O);\n      updatedSquares[bestMove] = PLAYERS.O;\n      setSquares(updatedSquares);\n      const isWinner = checkWinner(updatedSquares);\n      if (isWinner) {\n        setWinner(isWinner);\n        return;\n      }\n    }\n    setCurrentPlayer(PLAYERS.X);\n  };\n  const checkWinner = squares => {\n    for (const condition of WIN_CONDITIONS) {\n      const [a, b, c] = condition;\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n  const bestMoveAlgo = (squares, player) => {\n    let bestScore = -Infinity;\n    let bestMove = 0;\n    for (let i = 0; i < 9; i++) {\n      if (!squares[i]) {\n        squares[i] = player;\n        const score = minimax(squares, player === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n        squares[i] = null;\n        if (score > bestScore) {\n          bestScore = score;\n          bestMove = i;\n        }\n      }\n    }\n    return bestMove;\n  };\n  const minimax = (squares, player) => {\n    if (checkWinner(squares) === PLAYERS.O) {\n      return 1;\n    } else if (checkWinner(squares) === PLAYERS.X) {\n      return -1;\n    } else if (!squares.length) {\n      return 0;\n    }\n    let bestScore = player === PLAYERS.X ? -Infinity : Infinity;\n    let bestMove;\n    for (let i = 0; i < 9; i++) {\n      if (!squares[i]) {\n        squares[i] = player;\n        const score = minimax(squares, player === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n        //console.log(\"updatedsquares\", squares)\n        squares[i] = null;\n        if (player === PLAYERS.X) {\n          //bestScore = Math.max(bestScore, score);\n          if (score > bestScore) {\n            bestScore = score;\n            bestMove = i;\n          }\n        } else {\n          //bestScore = Math.min(bestScore, score);\n          if (score < bestScore) {\n            bestScore = score;\n            bestMove = i;\n          }\n        }\n      }\n    }\n    //console.log(\"bestMove\", bestMove)\n    return bestMove;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: squares,\n        onClick: handleSquareClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"LG/ZKWTxBInHCwmqM/OFDUGpDA4=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Board","jsxDEV","_jsxDEV","WIN_CONDITIONS","PLAYERS","X","O","Game","_s","squares","setSquares","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","handleSquareClick","index","console","log","updatedSquares","isWinner","checkWinner","bestMove","bestMoveAlgo","condition","a","b","c","player","bestScore","Infinity","i","score","minimax","length","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sridharperepu/Documents/Projects/TicTacToeAI/aiplayer/src/Components/Game.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Board from './Board';\n\nconst WIN_CONDITIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst PLAYERS = {\n  X: 'X',\n  O: 'O',\n};\n\nconst Game = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYERS.X);\n  const [winner, setWinner] = useState(null);\n\n  const handleSquareClick = (index) => {\n    console.log(index);\n    if (squares[index] || winner) return;\n\n    const updatedSquares = [...squares];\n    updatedSquares[index] = currentPlayer;\n    setSquares(updatedSquares);\n\n    console.log(\"squares\", squares)\n\n    const isWinner = checkWinner(updatedSquares);\n    if (isWinner) {\n      setWinner(isWinner);\n      return;\n    }\n    \n    //setCurrentPlayer(currentPlayer === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n    console.log(\"curr\", currentPlayer === PLAYERS.X ? PLAYERS.O : PLAYERS.X)\n\n    if (currentPlayer === PLAYERS.X) {\n      const bestMove = bestMoveAlgo(updatedSquares, PLAYERS.O);\n      updatedSquares[bestMove] = PLAYERS.O;\n      setSquares(updatedSquares);\n\n      const isWinner = checkWinner(updatedSquares);\n      if (isWinner) {\n        setWinner(isWinner);\n        return;\n      }\n    }\n\n    setCurrentPlayer(PLAYERS.X);\n  };\n\n  const checkWinner = (squares) => {\n    for (const condition of WIN_CONDITIONS) {\n      const [a, b, c] = condition;\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  const bestMoveAlgo = (squares, player) => {\n    let bestScore = -Infinity;\n    let bestMove = 0;\n\n    for (let i = 0; i < 9; i++) {\n        if (!squares[i]) {\n            squares[i] = player\n            const score = minimax(squares, player === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n            squares[i] = null\n\n            if (score > bestScore) {\n                bestScore = score;\n                bestMove = i\n            }\n        }\n    }\n\n    return bestMove\n  }\n\n  const minimax = (squares, player) => {\n  \n    if (checkWinner(squares) === PLAYERS.O) {\n      return 1;\n    } else if (checkWinner(squares) === PLAYERS.X) {\n      return -1;\n    } else if (!squares.length) {\n      return 0;\n    }\n\n    let bestScore = player === PLAYERS.X ? -Infinity : Infinity;\n    let bestMove;\n\n    for (let i = 0; i < 9; i++) {\n        if (!squares[i]) {\n            squares[i] = player;\n            const score = minimax(squares, player === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n            //console.log(\"updatedsquares\", squares)\n            squares[i] = null;\n\n            if (player === PLAYERS.X) {\n                //bestScore = Math.max(bestScore, score);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestMove = i;\n                }\n            } else {\n                //bestScore = Math.min(bestScore, score);\n                if (score < bestScore) {\n                    bestScore = score;\n                    bestMove = i;\n                }\n            }\n        }\n    }\n    //console.log(\"bestMove\", bestMove)\n    return bestMove;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board squares={squares} onClick={handleSquareClick} />\n      </div>\n    </div>\n  )\n}\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}