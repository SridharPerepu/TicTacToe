{"ast":null,"code":"var _jsxFileName = \"/Users/sridharperepu/Documents/Projects/TicTacToeAI/aiplayer/src/Components/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_BOARD = Array(9).fill(null);\nconst calculateWinner = squares => {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\nconst isBoardFull = squares => {\n  return squares.every(square => square !== null);\n};\nconst Game = () => {\n  _s();\n  const [history, setHistory] = useState([{\n    squares: INITIAL_BOARD\n  }]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [isAI, setIsAI] = useState(false);\n  useEffect(() => {\n    const current = history[stepNumber];\n    const winner = calculateWinner(current.squares);\n    if (winner) {\n      alert(`Winner: ${winner}`);\n    } else if (isBoardFull(current.squares)) {\n      alert(\"It's a draw!\");\n    } else if (isAI && !xIsNext) {\n      handleAI();\n    }\n  }, [history, stepNumber, xIsNext, isAI]);\n  const handleClick = i => {\n    if (calculateWinner(history[stepNumber].squares) || history[stepNumber].squares[i] || !xIsNext && isAI) {\n      return;\n    }\n    const currentHistory = history.slice(0, stepNumber + 1);\n    const current = currentHistory[currentHistory.length - 1];\n    const squares = current.squares.slice();\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory([...currentHistory, {\n      squares\n    }]);\n    setStepNumber(currentHistory.length);\n    setXIsNext(!xIsNext);\n    if (isAI && xIsNext) {\n      setIsAI(true);\n    }\n  };\n  const handleAI = () => {\n    const current = history[stepNumber];\n    const squares = current.squares.slice();\n    const aiMove = getBestMove(squares, 'O');\n    squares[aiMove] = 'O';\n    setHistory([...history, {\n      squares\n    }]);\n    setStepNumber(history.length);\n    setXIsNext(true);\n    setIsAI(false);\n  };\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n    setIsAI(false);\n  };\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n  const moves = history.map((step, move) => {\n    const desc = move ? `Go to move #${move}` : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  });\n  const status = winner ? `Winner: ${winner}` : `Next player: ${xIsNext ? 'X' : 'O'}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: current.squares,\n        onClick: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"AI Player\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isAI,\n          onChange: () => setIsAI(!isAI)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n// Minimax Algorithm\n_s(Game, \"d6r/DFggQzi4SCWIop3yTuhEVsk=\");\n_c = Game;\nconst getBestMove = (squares, player) => {\n  const availableMoves = squares.reduce((acc, value, index) => value === null ? [...acc, index] : acc, []);\n  const bestMove = minimax(squares, player, availableMoves);\n  return bestMove.index;\n};\nconst minimax = (squares, player, availableMoves) => {\n  const opponent = player === 'X' ? 'O' : 'X';\n  if (calculateWinner(squares) === 'O') {\n    return {\n      score: 1\n    };\n  } else if (calculateWinner(squares) === 'X') {\n    return {\n      score: -1\n    };\n  } else if (isBoardFull(squares)) {\n    return {\n      score: 0\n    };\n  }\n  const moves = [];\n  for (let i = 0; i < availableMoves.length; i++) {\n    const move = {};\n    move.index = availableMoves[i];\n    squares[availableMoves[i]] = player;\n    if (player === 'O') {\n      const result = minimax(squares, opponent, availableMoves);\n      move.score = result.score;\n    } else {\n      const result = minimax(squares, opponent, availableMoves);\n      move.score = -result.score;\n    }\n    squares[availableMoves[i]] = null;\n    moves.push(move);\n  }\n  let bestMove;\n  if (player === 'O') {\n    let bestScore = -Infinity;\n    for (let i = 0; i < moves.length; i++) {\n      if (moves[i].score > bestScore) {\n        bestScore = moves[i].score;\n        bestMove = i;\n      }\n    }\n  } else {\n    let bestScore = Infinity;\n    for (let i = 0; i < moves.length; i++) {\n      if (moves[i].score < bestScore) {\n        bestScore = moves[i].score;\n        bestMove = i;\n      }\n    }\n  }\n  return moves[bestMove];\n};\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Board","jsxDEV","_jsxDEV","INITIAL_BOARD","Array","fill","calculateWinner","squares","lines","i","length","a","b","c","isBoardFull","every","square","Game","_s","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","isAI","setIsAI","current","winner","alert","handleAI","handleClick","currentHistory","slice","aiMove","getBestMove","jumpTo","step","moves","map","move","desc","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","status","className","type","checked","onChange","_c","player","availableMoves","reduce","acc","value","index","bestMove","minimax","opponent","score","result","push","bestScore","Infinity","$RefreshReg$"],"sources":["/Users/sridharperepu/Documents/Projects/TicTacToeAI/aiplayer/src/Components/Game.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Board from './Board';\n\nconst INITIAL_BOARD = Array(9).fill(null);\n\nconst calculateWinner = (squares) => {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n\n    }\n\n    return null;\n};\n\nconst isBoardFull = (squares) => {\n    return squares.every((square) => square !== null)\n};\n\nconst Game = () => {\n    const [history, setHistory] = useState([{ squares: INITIAL_BOARD }]);\n    const [stepNumber, setStepNumber] = useState(0);\n    const [xIsNext, setXIsNext] = useState(true);\n    const [isAI, setIsAI] = useState(false);\n\n    useEffect(() => {\n        const current = history[stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    if (winner) {\n      alert(`Winner: ${winner}`);\n    } else if (isBoardFull(current.squares)) {\n      alert(\"It's a draw!\");\n    } else if (isAI && !xIsNext) {\n      handleAI();\n    }\n  }, [history, stepNumber, xIsNext, isAI]);\n\n  const handleClick = (i) => {\n    if (calculateWinner(history[stepNumber].squares) || history[stepNumber].squares[i] || (!xIsNext && isAI)) {\n      return;\n    }\n\n    const currentHistory = history.slice(0, stepNumber + 1);\n    const current = currentHistory[currentHistory.length - 1];\n    const squares = current.squares.slice();\n\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory([...currentHistory, { squares }]);\n    setStepNumber(currentHistory.length);\n    setXIsNext(!xIsNext);\n\n    if (isAI && xIsNext) {\n      setIsAI(true);\n    }\n  };\n\n  const handleAI = () => {\n    const current = history[stepNumber];\n    const squares = current.squares.slice();\n    const aiMove = getBestMove(squares, 'O');\n    squares[aiMove] = 'O';\n\n    setHistory([...history, { squares }]);\n    setStepNumber(history.length);\n    setXIsNext(true);\n    setIsAI(false);\n  };\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n    setIsAI(false);\n  };\n\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n\n  const moves = history.map((step, move) => {\n    const desc = move ? `Go to move #${move}` : 'Go to game start';\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    );\n  });\n\n  const status = winner ? `Winner: ${winner}` : `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board squares={current.squares} onClick={handleClick} />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n      <div className=\"options\">\n        <label>\n          AI Player\n          <input type=\"checkbox\" checked={isAI} onChange={() => setIsAI(!isAI)} />\n        </label>\n      </div>\n    </div>\n  );\n};\n\n// Minimax Algorithm\nconst getBestMove = (squares, player) => {\n  const availableMoves = squares.reduce((acc, value, index) => (value === null ? [...acc, index] : acc), []);\n\n  const bestMove = minimax(squares, player, availableMoves);\n\n  return bestMove.index;\n};\n\nconst minimax = (squares, player, availableMoves) => {\n  const opponent = player === 'X' ? 'O' : 'X';\n\n  if (calculateWinner(squares) === 'O') {\n    return { score: 1 };\n  } else if (calculateWinner(squares) === 'X') {\n    return { score: -1 };\n  } else if (isBoardFull(squares)) {\n    return { score: 0 };\n  }\n\n  const moves = [];\n\n  for (let i = 0; i < availableMoves.length; i++) {\n    const move = {};\n    move.index = availableMoves[i];\n    squares[availableMoves[i]] = player;\n\n    if (player === 'O') {\n      const result = minimax(squares, opponent, availableMoves);\n      move.score = result.score;\n    } else {\n      const result = minimax(squares, opponent, availableMoves);\n      move.score = -result.score;\n    }\n\n    squares[availableMoves[i]] = null;\n    moves.push(move);\n  }\n\n  let bestMove;\n  if (player === 'O') {\n    let bestScore = -Infinity;\n    for (let i = 0; i < moves.length; i++) {\n      if (moves[i].score > bestScore) {\n        bestScore = moves[i].score;\n        bestMove = i;\n      }\n    }\n  } else {\n    let bestScore = Infinity;\n    for (let i = 0; i < moves.length; i++) {\n      if (moves[i].score < bestScore) {\n        bestScore = moves[i].score;\n        bestMove = i;\n      }\n    }\n  }\n\n  return moves[bestMove];\n};\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}