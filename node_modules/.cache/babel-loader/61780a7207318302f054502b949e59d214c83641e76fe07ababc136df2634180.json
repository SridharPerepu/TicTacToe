{"ast":null,"code":"var _jsxFileName = \"/Users/sridharperepu/Documents/Projects/TicTacToeAI/aiplayer/src/Components/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Board from './Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WIN_CONDITIONS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\nconst PLAYERS = {\n  X: 'X',\n  O: 'O'\n};\nconst Game = () => {\n  _s();\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYERS.X);\n  const [winner, setWinner] = useState(null);\n  const handleSquareClick = index => {\n    if (squares[index] || winner) return;\n    const updatedSquares = [...squares];\n    updatedSquares[index] = currentPlayer;\n    setSquares(updatedSquares);\n    const isWinner = checkWinner(updatedSquares);\n    if (isWinner) {\n      setWinner(isWinner);\n      return;\n    }\n    if (currentPlayer === PLAYERS.O) {\n      const bestMove = minimax(updatedSquares, PLAYERS.O);\n      updatedSquares[bestMove] = currentPlayer;\n      setSquares(updatedSquares);\n      const isWinner = checkWinner(updatedSquares);\n      if (isWinner) {\n        setWinner(isWinner);\n        return;\n      }\n    }\n    setCurrentPlayer(currentPlayer === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n  };\n  function checkWinner(squares) {\n    for (const condition of WIN_CONDITIONS) {\n      const [a, b, c] = condition;\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  function minimax(squares, player) {\n    const availableMoves = [];\n    for (let i = 0; i < 9; i++) {\n      if (!squares[i]) {\n        availableMoves.push(i);\n      }\n    }\n    if (checkWinner(squares) === PLAYERS.O) {\n      return 1;\n    } else if (checkWinner(squares) === PLAYERS.X) {\n      return -1;\n    } else if (!availableMoves.length) {\n      return 0;\n    }\n    let bestScore = player === PLAYERS.X ? -Infinity : Infinity;\n    let bestMove;\n    for (const move of availableMoves) {\n      squares[move] = player;\n      const score = minimax(squares, player === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n      squares[move] = null;\n      if (player === PLAYERS.X) {\n        bestScore = Math.max(bestScore, score);\n        if (score > bestScore) {\n          bestMove = move;\n        }\n      } else {\n        bestScore = Math.min(bestScore, score);\n        if (score < bestScore) {\n          bestMove = move;\n        }\n      }\n    }\n    return bestMove;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: current.squares,\n        onClick: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"LG/ZKWTxBInHCwmqM/OFDUGpDA4=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Board","jsxDEV","_jsxDEV","WIN_CONDITIONS","PLAYERS","X","O","Game","_s","squares","setSquares","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","handleSquareClick","index","updatedSquares","isWinner","checkWinner","bestMove","minimax","condition","a","b","c","player","availableMoves","i","push","length","bestScore","Infinity","move","score","Math","max","min","className","children","current","onClick","handleClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sridharperepu/Documents/Projects/TicTacToeAI/aiplayer/src/Components/Game.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Board from './Board';\n\nconst WIN_CONDITIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst PLAYERS = {\n  X: 'X',\n  O: 'O',\n};\n\nconst Game = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYERS.X);\n  const [winner, setWinner] = useState(null);\n\n  const handleSquareClick = (index) => {\n    if (squares[index] || winner) return;\n\n    const updatedSquares = [...squares];\n    updatedSquares[index] = currentPlayer;\n    setSquares(updatedSquares);\n\n    const isWinner = checkWinner(updatedSquares);\n    if (isWinner) {\n      setWinner(isWinner);\n      return;\n    }\n\n    if (currentPlayer === PLAYERS.O) {\n      const bestMove = minimax(updatedSquares, PLAYERS.O);\n      updatedSquares[bestMove] = currentPlayer;\n      setSquares(updatedSquares);\n\n      const isWinner = checkWinner(updatedSquares);\n      if (isWinner) {\n        setWinner(isWinner);\n        return;\n      }\n    }\n\n    setCurrentPlayer(currentPlayer === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n  };\n\n  function checkWinner(squares) {\n    for (const condition of WIN_CONDITIONS) {\n      const [a, b, c] = condition;\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  function minimax(squares, player) {\n    const availableMoves = [];\n    for (let i = 0; i < 9; i++) {\n      if (!squares[i]) {\n        availableMoves.push(i);\n      }\n    }\n  \n    if (checkWinner(squares) === PLAYERS.O) {\n      return 1;\n    } else if (checkWinner(squares) === PLAYERS.X) {\n      return -1;\n    } else if (!availableMoves.length) {\n      return 0;\n    }\n  \n    let bestScore = player === PLAYERS.X ? -Infinity : Infinity;\n    let bestMove;\n    for (const move of availableMoves) {\n      squares[move] = player;\n      const score = minimax(squares, player === PLAYERS.X ? PLAYERS.O : PLAYERS.X);\n      squares[move] = null;\n  \n      if (player === PLAYERS.X) {\n        bestScore = Math.max(bestScore, score);\n        if (score > bestScore) {\n          bestMove = move;\n        }\n      } else {\n        bestScore = Math.min(bestScore, score);\n        if (score < bestScore) {\n          bestMove = move;\n        }\n      }\n    }\n  \n    return bestMove;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board squares={current.squares} onClick={handleClick} />\n      </div>\n      </div>\n  )\n}\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}